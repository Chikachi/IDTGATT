buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

repositories {
    ivy {
        name "CurseForge"
        artifactPattern 'http://addons-origin.cursecdn.com/files/[organisation]/[module]-[revision].[ext]'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

def mcVersion = '1.12'
def forgeVersion = '14.21.1.2420'

version = mcVersion + "-1.0.0"
group = "chikachi.idtga.tt" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ItsDangerousToGoAloneTakeThis"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = mcVersion + '-' + forgeVersion

    if (file('../run').exists()) {
        runDir = '../run'
    } else {
        runDir = 'run'
    }
    
    mappings = "snapshot_20170721"
}

def printDebug(message) {
    println "[" + archivesBaseName + "] " + message
}

class CurseForgeDependencyInfo {
    public String module, version, ext
    private String fileid

    public CurseForgeDependencyInfo(String module, String version, String ext, String fileid) {
        this.module = module
        this.version = version
        this.ext = ext
        this.fileid = fileid
    }

    public String GetFileId() {
        return Integer.parseInt(fileid.substring(0, 4)) + "/" + Integer.parseInt(fileid.substring(4))
    }
}

List<CurseForgeDependencyInfo> curseForgeDependencies = new ArrayList<CurseForgeDependencyInfo>();

dependencies {
    for (CurseForgeDependencyInfo dependency : curseForgeDependencies) {
        if (file("../" + dependency.module).exists()) {
            printDebug "Using local " + dependency.module + " project"
            compile project(":" + dependency.module)
            continue;
        }
        if (file("./" + dependency.module + ".jar").exists()) {
            printDebug "Using local " + dependency.module + " compiled jar"
            compile files("./" + dependency.module + ".jar")
            continue;
        }
        compile group: dependency.GetFileId(), name: dependency.module, version: dependency.version, ext: dependency.ext
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

idea { module { inheritOutputDirs = true } }
